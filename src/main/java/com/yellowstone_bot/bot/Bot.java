package com.yellowstone_bot.bot;

import com.yellowstone_bot.prediction.Prediction;
import com.yellowstone_bot.prediction.PredictionImp;
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;

import java.io.IOException;
import java.util.*;

public class Bot extends TelegramLongPollingBot {
    private List<Prediction> mainPredictionsList;
    private String mainDate = "0";
    private final List<String> strForMatchesWithPredictionList = Arrays.asList(
            "–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –≤–æ—Ç –º–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n",
            "–Ø –¥—É–º–∞—é, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–π—Ç–∏:\n",
            "–í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑, –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏:\n",
            "–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Ç —ç—Ç–æ, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ:\n",
            "–Ø –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –ù–æ—Å—Ç—Ä–∞–¥–∞–º—É—Å, –Ω–æ —ç—Ç–æ –≤–µ—Ä–æ—á–∫–∞:\n",
            "–õ–∞–¥–Ω–æ, —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Ç —ç—Ç–æ:\n",
            "Think about it:\n",
            "–ù–∞–¥–µ—é—Å—å, –µ—Å–ª–∏ –∑–∞–π–¥–µ—Ç, —Ç—ã –ø–æ–¥–µ–ª–∏—à—å—Å—è:\n",
            "–ü–æ–¥ –º–æ—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:\n",
            "–°—É–¥—å—è –º–æ–π —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫, —Ç–∞–∫ —á—Ç–æ –Ω–µ –ø–∞—Ä—å—Å—è:\n",
            "\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\n"
    );
    private final List<String> strForMatchesWithoutPredictionList = Arrays.asList(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç, —É –º–µ–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ üòî",
            "–ù–µ —Ä—É–≥–∞–π—Å—è, –Ω–æ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —ç—Ç–∏—Ö —Ä–µ–±—è—Ç —Å–µ–≥–æ–¥–Ω—è",
            "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, —Å–µ–≥–æ–¥–Ω—è —Ä–µ–±—è—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –∏–≥—Ä–∞—Ç—å —á–∏—Å—Ç–æ (–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ), —Ç–∞–∫ —á—Ç–æ –º—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —ç—Ç–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç",
            "–ü—Ä–æ—Å—Ç–∏, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —ç—Ç–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç"
    );
    private final String strForNotMatchesDay = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π —ç—Ç–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞, –∑–∞—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å!\uD83D\uDC4B";

    public static void main(String[] args) {
        ApiContextInitializer.init();
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi();
        try {
            telegramBotsApi.registerBot(new Bot());
        } catch (TelegramApiRequestException e) {
            e.printStackTrace();
        }
    }

    public String getBotUsername() {
        return "Yellowstone";
    }

    public String getBotToken() {
        return "1041246602:AAGWCLLwqxk3VS_lB3itRKpYHGo07OhBcrA";
    }

    private synchronized List<String> getStrPredictionList() throws IOException {
        String todayDate = new Date().toString().substring(8, 10);
        if (!todayDate.equals(mainDate)) {
            mainDate = todayDate;
            mainPredictionsList = new ArrayList<>();
            mainPredictionsList.add(new PredictionImp("https://www.championat.com/football/_spain/tournament/3001/"));
            mainPredictionsList.add(new PredictionImp("https://www.championat.com/football/_england/tournament/2995/"));
            mainPredictionsList.add(new PredictionImp("https://www.championat.com/football/_germany/tournament/2999/"));
            mainPredictionsList.add(new PredictionImp("https://www.championat.com/football/_italy/tournament/2997/"));
            mainPredictionsList.add(new PredictionImp("https://www.championat.com/football/_france/tournament/3003/"));
        }
        List<String> result = new ArrayList<>();
        for (Prediction prediction : mainPredictionsList) {
            List<String> predictionForMatchList = prediction.getPrediction();
            Random random = new Random();
            if (predictionForMatchList == null) {
                result.add(strForNotMatchesDay);
            } else if (predictionForMatchList.isEmpty()) {
                result.add(strForMatchesWithoutPredictionList.get(random.nextInt(5)));
            } else {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(strForMatchesWithPredictionList.get(random.nextInt(11)));
                stringBuilder.append("\n");
                for (String predictionStr : predictionForMatchList) {
                    stringBuilder.append(predictionStr);
                    stringBuilder.append("\n");
                }
                result.add(stringBuilder.toString());
            }
        }
        return result;
    }

    public void onUpdateReceived(Update update) {
        Message message = update.getMessage();
        if (message != null && message.hasText()) {
            switch (message.getText()) {
                case "/start":
                    String startStr = "–ü—Ä–∏–≤–µ—Ç, " + message.getFrom().getFirstName() +
                            "! –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å—é –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" +
                            " –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ñ–ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö, –º–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –∏–¥–µ–∞–ª–µ–Ω" +
                            ", –Ω–æ —è —É—á—É—Å—å –∏ –±—É–¥—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ, –≤—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç –≤–Ω–∏–∑—É –∏ –∂–µ–ª–∞—é —Ç–µ–±–µ —É–¥–∞—á–∏!\uD83D\uDE09";
                    sendMsg(message, startStr);
                    break;
                case "\uD83C\uDDE9\uD83C\uDDEA Bundesliga":
                    try {
                        sendMsg(message, getStrPredictionList().get(2));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case "\uD83C\uDDEA\uD83C\uDDF8 La Liga":
                    try {
                        sendMsg(message, getStrPredictionList().get(0));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case "\uD83C\uDDEB\uD83C\uDDF7 Ligue 1":
                    try {
                        sendMsg(message, getStrPredictionList().get(4));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case "\uD83C\uDDEE\uD83C\uDDF9 Serie A":
                    try {
                        sendMsg(message, getStrPredictionList().get(3));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case "\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F" +
                        " Premier League":
                    try {
                        sendMsg(message, getStrPredictionList().get(1));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case "\uD83E\uDDD0":
                    String infoStr = "–ü—Ä–∏–≤–µ—Ç, —è –≤—Å–µ–≥–¥–∞ –¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Ç—Ä–æ–º –≤ –¥–µ–Ω—å –º–∞—Ç—á–µ–π —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –Ω–∞ –æ–¥–∏–Ω –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å," +
                            " –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –ø–æ–ª—å–∑—É–π—Å—è –º–Ω–æ–π –≤ –¥–µ–Ω—å –º–∞—Ç—á–µ–π\uD83D\uDE09\n–Ø —Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç—á–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö" +
                            " –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ñ–ö –≤—ã—à–µ –≤—Å–µ–≥–æ, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É—Ç–±–æ–ª ‚Äì —ç—Ç–æ —Å–ø–æ—Ä—Ç –∏ –∏–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±–æ–π\uD83D\uDE14\n" +
                            message.getFrom().getFirstName() + ", –∂–µ–ª–∞—é —Ç–µ–±–µ —É–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è\uD83D\uDE0A";
                    sendMsg(message, infoStr);
                    break;
                default:
                    sendMsg(message, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!");
                    break;
            }
        }
    }

    private void setButtons(SendMessage sendMessage) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        sendMessage.setReplyMarkup(replyKeyboardMarkup);
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboardRowList = new ArrayList<>();
        KeyboardRow keyboardRow1 = new KeyboardRow();
        KeyboardRow keyboardRow2 = new KeyboardRow();
        KeyboardRow keyboardRow3 = new KeyboardRow();

        keyboardRow1.add("\uD83C\uDDE9\uD83C\uDDEA Bundesliga");
        keyboardRow1.add("\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F" + " Premier League");
        keyboardRow2.add("\uD83C\uDDEB\uD83C\uDDF7 Ligue 1");
        keyboardRow2.add("\uD83C\uDDEE\uD83C\uDDF9 Serie A");
        keyboardRow3.add("\uD83C\uDDEA\uD83C\uDDF8 La Liga");
        keyboardRow3.add("\uD83E\uDDD0");

        keyboardRowList.add(keyboardRow1);
        keyboardRowList.add(keyboardRow2);
        keyboardRowList.add(keyboardRow3);
        replyKeyboardMarkup.setKeyboard(keyboardRowList);
    }

    private void sendMsg(Message message, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.enableMarkdown(true);
        sendMessage.setChatId(message.getChatId().toString());
        sendMessage.setReplyToMessageId(message.getMessageId());
        sendMessage.setText(text);
        try {
            setButtons(sendMessage);
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}